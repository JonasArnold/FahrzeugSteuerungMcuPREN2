#include "display.h"
#include "configuration.h"
#include <SPI.h>
#include <Wire.h>               // Only needed for Arduino 1.6.5 and earlier
#include "SSD1306Wire.h"        // legacy: #include "SSD1306.h"

// Initialize the OLED display using Arduino Wire:
SSD1306Wire display(0x3c, 5, 4);

// 'logo_small', 90x39px
#ifdef USING_DISPLAY
static const uint8_t logo_small[512] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xe1, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x80, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x81, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x30, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x11, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x10, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x10, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x3f, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xf1, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x06, 0x7f, 0xff, 0xff, 0x1f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0, 
	0x00, 0x7f, 0xfe, 0x7e, 0x0f, 0xc0, 0xff, 0xe7, 0xff, 0xff, 0xf0, 0x40, 0x30, 0x7f, 0xfe, 0x7e, 
	0x4f, 0xc7, 0xff, 0xe7, 0xff, 0xff, 0xe2, 0x00, 0x30, 0x77, 0xfe, 0x7e, 0x4f, 0xc7, 0xff, 0xff, 
	0xff, 0xff, 0xe3, 0x00, 0x30, 0x41, 0x04, 0x3e, 0x4f, 0xc7, 0x20, 0x06, 0x11, 0x21, 0xe3, 0x00, 
	0x00, 0x49, 0x22, 0x7f, 0x1f, 0xc1, 0x20, 0x64, 0x81, 0x25, 0xe3, 0x00, 0x04, 0x49, 0x22, 0x7e, 
	0x13, 0xc1, 0x20, 0xe4, 0x81, 0x27, 0xf0, 0x00, 0x3c, 0x61, 0x22, 0x7e, 0x13, 0xc7, 0x20, 0xe4, 
	0x81, 0x21, 0xf9, 0x00, 0x3c, 0x41, 0x22, 0x7c, 0x03, 0xc7, 0x20, 0xe4, 0x81, 0x31, 0xff, 0x00, 
	0x3c, 0x49, 0x22, 0x7c, 0x47, 0xc7, 0x20, 0xe4, 0x81, 0x28, 0xe3, 0x00, 0x3c, 0x41, 0x22, 0x3c, 
	0x03, 0xc7, 0x00, 0xe4, 0x00, 0x20, 0xf0, 0x00, 0x3e, 0x41, 0x22, 0x3e, 0x03, 0xc7, 0x04, 0xe6, 
	0x18, 0x21, 0xf0, 0x40
};
#endif


void Display_Init()
{
#ifdef USING_DISPLAY
  // Initialising the UI will init the display too.
  display.init();

  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_10);

  Serial.println("Display initialized.");
#endif
}

void Display_SetupBase()
{
#ifdef USING_DISPLAY
  display.drawHorizontalLine(0, 16, 128);
  display.drawHorizontalLine(0, 32, 128);
  display.drawHorizontalLine(0, 48, 128);
  display.drawVerticalLine(64, 16, 64);

  display.setColor(WHITE);
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(3, 3, "State");
  display.drawString(80, 3, "B");  
  display.drawString(3, 19, "Coil");
  //display.drawString(67, 19, "");
  display.drawString(3, 35, "Speed");
  display.drawString(67, 35, "Steer");
  display.drawString(3, 51, "RPM L");
  display.drawString(67, 51, "RPM R");

  display.display();
#endif
}

void Display_UpdateNewValues(String state, int batPct, bool connected, int coilVal, int speedval, int steerVal, int rpmL, int rpmR)
{
#ifdef USING_DISPLAY
  display.drawString(35, 3, state);
  display.drawString(90, 3, String(batPct));  
  if(connected)
  {
    display.drawString(120, 3, "C");  
  }
  display.drawString(40, 19, String(coilVal));
  //display.drawString(105, 19, "");
  display.drawString(40, 35, String(speedval));
  display.drawString(105, 35, String(steerVal));
  display.drawString(40, 51, String(rpmL));
  display.drawString(105, 51, String(rpmR));

  display.display();
#endif
}

void Display_ShowInitText(String text)
{
#ifdef USING_DISPLAY
  display.clear();
  display.drawFastImage(19, 3, 90, 39, logo_small);
  display.setColor(WHITE);
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(5, 45, text);

  display.display();
#endif
}


void Display_ShowText(int16_t posX, int16_t posY, String text)
{
#ifdef USING_DISPLAY
  display.setColor(WHITE);
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.drawString(posX, posY, text);
  display.setFont(ArialMT_Plain_10);

  display.display();
#endif
}

void Display_Clear()
{
#ifdef USING_DISPLAY
  display.clear();
#endif
}